name: Deploy WordPress via Bastion

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub 레포지토리 코드 체크아웃
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2. AWS 인증 설정 (ECR에 로그인하기 위해)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 3. ECR 로그인
    - name: Log in to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password | docker login \
          --username AWS \
          --password-stdin ${{ secrets.ECR_REPOSITORY }}

    # 4. Docker 이미지 빌드 및 ECR 태깅
    - name: Build Docker Image
      run: |
        docker build -t wordpress-ecr ./study/docker/wordpress-repo  # Dockerfile이 있는 경로에서 빌드
        docker tag wordpress-ecr:latest ${{ secrets.ECR_REPOSITORY }}:latest  # ECR 업로드용 태그 설정

    # 5. ECR에 이미지 푸시
    - name: Push to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    # 6. SSH Agent 설정 (pem 키로 EC2 접근)
    - name: Set up SSH Agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # 7. Bastion을 통해 EC2에 배포 명령 실행
    - name: Deploy to EC2 via Bastion
      run: |
        ssh -tt -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -J ec2-user@${{ secrets.BASTION_HOST }} ec2-user@${{ secrets.TARGET_HOST }} \
          "cd /home/ec2-user/study/docker/wordpress-repo && \
           git pull origin main && \
           echo DB_NAME=${{ secrets.DB_NAME }} > .env && \
           echo DB_USER=${{ secrets.DB_USER }} >> .env && \
           echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env && \
           echo DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} >> .env && \
           docker-compose down && \
           docker-compose up -d --build"

