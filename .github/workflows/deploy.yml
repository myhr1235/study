# 워크플로우 이름 (GitHub Actions 탭에서 표시될 이름)
name: Deploy WordPress via Bastion

# main 브랜치에 push가 발생할 때 이 워크플로우를 실행
on:
  push:
    branches: [ main ]

jobs:
  deploy:  # 작업(Job)의 이름
    runs-on: ubuntu-latest  # GitHub Actions에서 제공하는 Ubuntu 최신 이미지 환경 사용

    steps:
    - name: Checkout Repo  # GitHub 레포지토리의 코드를 이 워크플로우 환경으로 가져오기
      uses: actions/checkout@v3

    - name: Set up SSH Agent  # SSH를 통해 EC2에 접속할 수 있도록 SSH 에이전트 설정
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # GitHub Secrets에 저장된 .pem 키 사용

    - name: Deploy to EC2 via Bastion  # Bastion 서버를 거쳐 Private EC2에 SSH 접속 후 배포
      run: |
        # Bastion 서버(-J 옵션)를 통해 Target EC2에 SSH 접속
        ssh -o StrictHostKeyChecking=no \
            -J ec2-user@${{ secrets.BASTION_HOST }} \
            ec2-user@${{ secrets.TARGET_HOST }} << 'EOF'

        # EC2 내부: WordPress 프로젝트 디렉토리로 이동
        cd /home/ec2-user/wordpress-repo

        # 최신 코드를 GitHub에서 Pull
        git pull origin main

        # GitHub Secrets를 이용하여 .env 파일 생성 (컨테이너에서 사용될 환경변수)
        cat <<EOT > .env
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
        EOT

        # 기존 컨테이너 중단 및 삭제
        docker-compose down

        # 새 컨테이너 빌드 및 실행 (백그라운드 모드)
        docker-compose up -d --build

        EOF  # SSH 접속 종료 및 전체 명령어 종료

