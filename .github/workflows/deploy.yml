name: Deploy WordPress via Bastion  # GitHub Actions 워크플로우 이름

on:
  push:
    branches: [ main ]  # main 브랜치에 push 될 때 실행됨

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 사용할 런너 환경

    steps:
    - name: Checkout Repository  # GitHub 레포지토리 코드 가져오기
      uses: actions/checkout@v3

    - name: Configure AWS credentials  # AWS CLI 인증 설정
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에서 가져온 AWS Access Key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secrets에서 가져온 AWS Secret Key
        aws-region: ${{ secrets.AWS_REGION }}  # ex) ap-northeast-2

    - name: Log in to Amazon ECR  # ECR에 로그인 (도커 인증)
      id: login-ecr
      run: |
        aws ecr get-login-password | docker login \
        --username AWS \
        --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build Docker Image  # Docker 이미지 빌드
      run: |
        docker build -t wordpress-ecr ./study/docker/wordpress-repo  # 빌드된 이미지를 wordpress-ecr로 태깅
        docker tag wordpress-ecr:latest ${{ secrets.ECR_REPOSITORY }}:latest  # ECR URI로 재태깅

    - name: Push to ECR  # ECR로 이미지 푸시
      run: |
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    - name: Set up SSH Agent  # SSH 연결을 위한 비공개 키 등록
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # GitHub Secrets에 등록된 PEM 키

    - name: Deploy to EC2 via Bastion  # Bastion을 통해 Web EC2에 접속 후 배포 명령 실행
      run: |
        ssh -tt -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -J ec2-user@${{ secrets.BASTION_HOST }} ec2-user@${{ secrets.TARGET_HOST }} \
          "cd /home/ec2-user/study/docker/wordpress-repo && \
           git pull origin main && \  # 최신 코드 가져오기
           echo DB_NAME=${{ secrets.DB_NAME }} > .env && \  # .env 파일에 DB 환경변수 저장
           echo DB_USER=${{ secrets.DB_USER }} >> .env && \
           echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env && \
           echo DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} >> .env && \
           docker-compose down && \  # 기존 컨테이너 종료
           docker-compose up -d --build"  # 새 이미지로 컨테이너 재실행 (백그라운드)

