name: Deploy WordPress via Bastion

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub 레포지토리 코드 체크아웃
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2. AWS 인증 설정 (ECR 로그인용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 3. ECR 로그인
    - name: Log in to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password | docker login \
          --username AWS \
          --password-stdin ${{ secrets.ECR_REPOSITORY }}

    # 4. Docker 이미지 빌드 및 태깅
    - name: Build Docker Image
      run: |
        docker build -t wordpress-ecr docker/wordpress-repo
        docker tag wordpress-ecr:latest ${{ secrets.ECR_REPOSITORY }}:latest

    # 5. ECR에 이미지 푸시
    - name: Push to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    # 6. SSH 키 복호화 (base64 인코딩된 .pem 키를 복호화)
    - name: Decode SSH private key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > docker-educate.pem
        chmod 600 docker-educate.pem

    # 7. Bastion을 통해 EC2에 배포 명령 실행
    - name: Deploy to EC2 via Bastion
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        ssh -i docker-educate.pem -tt \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -J ec2-user@${{ secrets.BASTION_HOST }} ec2-user@${{ secrets.TARGET_HOST }} << 'ENDSSH'
            cd /home/ec2-user/docker/study/docker/wordpress-repo
            git pull origin main
            cat <<EOF > .env
DB_NAME=${DB_NAME}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
EOF
            docker-compose down
            docker-compose up -d
ENDSSH

